// Code generated by "enumer -type=ShipmentStatus -json -sql -transform=snake"; DO NOT EDIT.

package logistics

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const (
	_ShipmentStatusName_0 = "planningpreparationpackedsent_outcustoms_clearanceon_the_way_to_tpdelivered_to_tpdelivered_to_recipient"
	_ShipmentStatusName_1 = "invalid_status"
)

var (
	_ShipmentStatusIndex_0 = [...]uint8{0, 8, 19, 25, 33, 50, 66, 81, 103}
	_ShipmentStatusIndex_1 = [...]uint8{0, 14}
)

func (i ShipmentStatus) String() string {
	switch {
	case 0 <= i && i <= 7:
		return _ShipmentStatusName_0[_ShipmentStatusIndex_0[i]:_ShipmentStatusIndex_0[i+1]]
	case i == 999:
		return _ShipmentStatusName_1
	default:
		return fmt.Sprintf("ShipmentStatus(%d)", i)
	}
}

var _ShipmentStatusValues = []ShipmentStatus{0, 1, 2, 3, 4, 5, 6, 7, 999}

var _ShipmentStatusNameToValueMap = map[string]ShipmentStatus{
	_ShipmentStatusName_0[0:8]:    0,
	_ShipmentStatusName_0[8:19]:   1,
	_ShipmentStatusName_0[19:25]:  2,
	_ShipmentStatusName_0[25:33]:  3,
	_ShipmentStatusName_0[33:50]:  4,
	_ShipmentStatusName_0[50:66]:  5,
	_ShipmentStatusName_0[66:81]:  6,
	_ShipmentStatusName_0[81:103]: 7,
	_ShipmentStatusName_1[0:14]:   999,
}

// ShipmentStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ShipmentStatusString(s string) (ShipmentStatus, error) {
	if val, ok := _ShipmentStatusNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ShipmentStatus values", s)
}

// ShipmentStatusValues returns all values of the enum
func ShipmentStatusValues() []ShipmentStatus {
	return _ShipmentStatusValues
}

// IsAShipmentStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ShipmentStatus) IsAShipmentStatus() bool {
	for _, v := range _ShipmentStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ShipmentStatus
func (i ShipmentStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ShipmentStatus
func (i *ShipmentStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ShipmentStatus should be a string, got %s", data)
	}

	var err error
	*i, err = ShipmentStatusString(s)
	return err
}

func (i ShipmentStatus) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *ShipmentStatus) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := ShipmentStatusString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
