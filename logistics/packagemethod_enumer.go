// Code generated by "enumer -type=PackageMethod -json -sql -transform=snake"; DO NOT EDIT.

package logistics

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const _PackageMethodName = "package_nonepackage_bagpackage_standardpackage_cartonpackage_foampackage_carton_foampackage_wooden_cratepackage_wooden_crate_foampackage_wooden_boxpackage_wooden_box_foam"

var _PackageMethodIndex = [...]uint8{0, 12, 23, 39, 53, 65, 84, 104, 129, 147, 170}

func (i PackageMethod) String() string {
	if i < 0 || i >= PackageMethod(len(_PackageMethodIndex)-1) {
		return fmt.Sprintf("PackageMethod(%d)", i)
	}
	return _PackageMethodName[_PackageMethodIndex[i]:_PackageMethodIndex[i+1]]
}

var _PackageMethodValues = []PackageMethod{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}

var _PackageMethodNameToValueMap = map[string]PackageMethod{
	_PackageMethodName[0:12]:    0,
	_PackageMethodName[12:23]:   1,
	_PackageMethodName[23:39]:   2,
	_PackageMethodName[39:53]:   3,
	_PackageMethodName[53:65]:   4,
	_PackageMethodName[65:84]:   5,
	_PackageMethodName[84:104]:  6,
	_PackageMethodName[104:129]: 7,
	_PackageMethodName[129:147]: 8,
	_PackageMethodName[147:170]: 9,
}

// PackageMethodString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PackageMethodString(s string) (PackageMethod, error) {
	if val, ok := _PackageMethodNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to PackageMethod values", s)
}

// PackageMethodValues returns all values of the enum
func PackageMethodValues() []PackageMethod {
	return _PackageMethodValues
}

// IsAPackageMethod returns "true" if the value is listed in the enum definition. "false" otherwise
func (i PackageMethod) IsAPackageMethod() bool {
	for _, v := range _PackageMethodValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for PackageMethod
func (i PackageMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for PackageMethod
func (i *PackageMethod) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("PackageMethod should be a string, got %s", data)
	}

	var err error
	*i, err = PackageMethodString(s)
	return err
}

func (i PackageMethod) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *PackageMethod) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := PackageMethodString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
