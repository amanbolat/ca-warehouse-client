// Code generated by "enumer -type=ShipmentType -json -sql -transform=snake"; DO NOT EDIT.

package logistics

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const _ShipmentTypeName = "common_shipmentconsolidation_shipment"

var _ShipmentTypeIndex = [...]uint8{0, 15, 37}

func (i ShipmentType) String() string {
	if i < 0 || i >= ShipmentType(len(_ShipmentTypeIndex)-1) {
		return fmt.Sprintf("ShipmentType(%d)", i)
	}
	return _ShipmentTypeName[_ShipmentTypeIndex[i]:_ShipmentTypeIndex[i+1]]
}

var _ShipmentTypeValues = []ShipmentType{0, 1}

var _ShipmentTypeNameToValueMap = map[string]ShipmentType{
	_ShipmentTypeName[0:15]:  0,
	_ShipmentTypeName[15:37]: 1,
}

// ShipmentTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ShipmentTypeString(s string) (ShipmentType, error) {
	if val, ok := _ShipmentTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ShipmentType values", s)
}

// ShipmentTypeValues returns all values of the enum
func ShipmentTypeValues() []ShipmentType {
	return _ShipmentTypeValues
}

// IsAShipmentType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ShipmentType) IsAShipmentType() bool {
	for _, v := range _ShipmentTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ShipmentType
func (i ShipmentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ShipmentType
func (i *ShipmentType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ShipmentType should be a string, got %s", data)
	}

	var err error
	*i, err = ShipmentTypeString(s)
	return err
}

func (i ShipmentType) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *ShipmentType) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := ShipmentTypeString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
